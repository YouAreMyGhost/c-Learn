#pragma once
#include <iostream>
#include <list>
#include <algorithm>
using namespace std;

namespace L
{
	template<class T>
	struct ListNode
	{
		T _data;
		ListNode<T>* _next;
		ListNode<T>* _prev;
		//构造函数:初始化节点
		ListNode(const T& x = T())
			: _data(x)
			, _next(nullptr)
			, _prev(nullptr)
		{}
	};
	//template<class T>
	//迭代器iterator实现
	//用struct实现：定义为公有，不必用友元函数进行调用
	//Ref传T&（引用），Ptr传T*（指针）
	template<class T, class Ref, class Ptr>
	struct List_iterator
	{
		typedef ListNode<T> node;
		typedef List_iterator<T, Ref, Ptr> self;
		node* _node;

		List_iterator(node* node)
			:_node(node)
		{}

		// 拷贝构造 赋值重载 析构都不用实现，默认就可以

		bool operator!=(const self& s) const
		{
			return _node != s._node;
		}
		bool operator==(const self& s) const
		{
			return !(*this != s);
		}
		Ptr operator->() const
		{
			return &_node->_data;    
		}
		Ref operator*() const
		{
			return _node->_data;
		}
		// it++  it.operator(&it, 0)
		self operator++(int)
		{
			self tmp(*this);
			_node = _node->_next;
			return tmp;
		}
		// ++it it.operator(&it)
		self& operator++()
		{
			_node = _node->_next;
			return *this;
		}
		self operator--(int)
		{
			self tmp(*this);
			_node = _node->_prev;
			return tmp;
		}
		self& operator--()
		{
			_node = _node->_prev;
			return *this;
		}
	};
	
	template<class T>
	class list
	{
		typedef ListNode<T> node;
	private:
		node* _head;
	public:
		typedef List_iterator<T, T&, T*> iterator;
		typedef List_iterator<T, const T&, const T*> const_iterator;
		iterator begin()
		{
			return _head->_next;
		}
		iterator end()
		{
			return _head;
		}
		//构造函数：初始化list
		list()
		{
			_head = new node;
			_head->_next = _head;
			_head->_prev = _head;
		}
		//尾插
		void push_back(const T& x)
		{
			node* newnode = new node(x);
			node* tail = _head->_prev;
			
			tail->_next = newnode;
			newnode->_prev = tail;
			newnode->_next=_head;
			_head->_prev = newnode;
		}
	};
}
