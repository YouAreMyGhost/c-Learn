/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    // bool NodeFind(TreeNode* root,TreeNode* x)
    // {
    //     if(root==nullptr)
    //     {
    //         return false;
    //     }   
    //     if(root==x)
    //     {
    //         return true;
    //     }
    //     return NodeFind(root->left,x)||NodeFind(root->right,x);
    // }
    // TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)
    // {
    //     if(root==nullptr)
    //         return nullptr; 
    //     if(q==root||p==root)
    //     {
    //         return root;
    //     }
    //     bool pInL,pInR,qInL,qInR;  
    //     pInL=NodeFind(root->left,p);
    //     pInR=!pInL;
    //     qInL=NodeFind(root->left,q);
    //     qInR=!qInL;
    //     //一个在左一个在右
    //     if((pInL&&qInR)||(pInR&&qInL))
    //         return root;
    //     else if(pInL&&qInL)
    //         return lowestCommonAncestor(root->left,p,q);
    //     else
    //         return lowestCommonAncestor(root->right,p,q);
    //     //return nullptr;
    // }
    bool findPath(TreeNode* root,TreeNode* x,stack<TreeNode*>& path)
    {
        //本质是前序遍历二叉树
        if(root==nullptr)
        {
            return false;
        }
        path.push(root);
        if(root==x)
        {
            return true;
        }
        if(findPath(root->right,x,path))
        {
            return true;
        }
        if(findPath(root->left,x,path))
        {
            return true;
        }
        path.pop();
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)
    {
        stack<TreeNode*>pPath;
        stack<TreeNode*>qPath;
        findPath(root,p,pPath);
        findPath(root,q,qPath);
        while(qPath.size()>pPath.size())
        {
            qPath.pop();
        }        
        while(pPath.size()>qPath.size())
        {
            pPath.pop();
        }
        while(pPath.top()!=qPath.top())
        {
            qPath.pop();
            pPath.pop();
        }
        return pPath.top();
    }

};
